from constants import (
    TIME_ARRAY_OUT_DIRECTORY,
    H5_CHUNK_OUT_DIRECTORY,
    ZMQ_PORT,
    USE_CIRCULAR_BUFFER,
)
from hdf5_chunk_writer import (
    retrieve_chunks_and_save_to_shm,
    retrieve_chunks_and_save_to_shm_circular_buffer,
)
from inotify_chunk_deleter import delete_old_chunks_on_new_dir_creation
from mpi4py import MPI
from time import time_ns
from zmq_socket import start_zmp_chunk_server
import os


def run_with_mpi(rank, current_time, use_circular_buffer=USE_CIRCULAR_BUFFER):
    if use_circular_buffer:
        h5_chunk_out_directory = "/dev/shm"
    else:
        h5_chunk_out_directory = os.path.join(
            H5_CHUNK_OUT_DIRECTORY, f"run_at_{current_time}"
        )

    time_array_out_directory = os.path.join(
        TIME_ARRAY_OUT_DIRECTORY, f"run_at_{current_time}_time_results.npy"
    )

    if rank == 0:
        print(f"Core 0 initialising zmq server.")
        start_zmp_chunk_server(port=ZMQ_PORT)

    elif rank == 1:
        print("Core 1 outputting chunks to shm.")

        if use_circular_buffer:
            retrieve_chunks_and_save_to_shm_circular_buffer(
                ZMQ_PORT,
                h5_chunk_out_directory,
                str(current_time) + ".dat",
                time_array_out_directory,
            )
        else:
            retrieve_chunks_and_save_to_shm(
                ZMQ_PORT, h5_chunk_out_directory, time_array_out_directory
            )

    elif rank == 2:
        if use_circular_buffer:
            print("Core 2 has nothing to do.")
        else:
            try:
                os.mkdir(TIME_ARRAY_OUT_DIRECTORY)
            except FileExistsError:
                pass

            delete_old_chunks_on_new_dir_creation(h5_chunk_out_directory)


    else:
        print(f"core {rank} has nothing to do")


def get_start_time(comm, rank, cores):
    """
    Current time so cores can use the same autogenerated directory.
    """
    current_time = time_ns()
    if cores == 1:
        return current_time
    if rank == 0:
        for core in range(1, cores):
            comm.isend(current_time, dest=core, tag=1)
        return current_time
    else:
        return comm.recv(source=0, tag=1)


def main():

    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    cores = comm.Get_size()

    cores_required = 3 - USE_CIRCULAR_BUFFER

    if cores < cores_required:
        print(
            f"Test is using {cores} cores, requires at least {cores_required}, run with mpiexec -n {cores_required}"
        )
        return

    if rank == 0:
        print(f"Running with {cores} cores")

    # Get the time core 0 started
    current_time = get_start_time(comm, rank, cores)

    run_with_mpi(rank, current_time)


if __name__ == "__main__":
    main()
